/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const fs = require("fs").promises;
const { error } = require("console");
const { title } = require("process");

const app = express();

app.use(bodyParser.json());

let getTodos = async () => {
  try {
    let data = await fs.readFile("todos.json", "utf-8");
    return JSON.parse(data);
  } catch (err) {
    throw new Error("No todos task found");
  }
};

// Call function properly
// getTodos()
//     .then(console.log)
//     .catch(console.error);

app.get("/todos", async (req, res) => {
  //  fs.readFile('todos.json',"utf-8",(err,data)=>{
  //   if(err){
  //     return res.status(404).json({msg:"no todos task found"})
  //   }
  //   res.send(data);
  // });
  try {
    let todos = await getTodos();
    res.status(200).send(todos);
  } catch (err) {
    res.status(404).json({ msg: "No todos task found" });
  }
});

app.get("/todos/:id", async (req, res) => {
  let uniqueID = parseInt(req.params.id);
  try {
    let todos = await getTodos();
    let todo = todos.find((t) => t.id === uniqueID);
    res.status(200).send(todo);
  } catch (err) {
    res.status(404).json({ msg: "No todos task found" });
  }
});

app.post("/todos", async (req, res) => {
  let todo = {
    id: Math.floor(Math.random() * 10000),
    title: req.body.title,
    description: req.body.des,
    completed: false,
  };

  try {
    let todos = await getTodos();
    if (todos.push(todo)) {
      await fs.writeFile("todos.json", JSON.stringify(todos));
      res.status(201).json({ msg: "todo is Added" });
    }
  } catch (err) {
    console.log(err);
    res.status(404).json({ Error: "No todos task found" });
  }
});

app.put("/todos/:id", async (req, res) => {
  const TaskId = parseInt(req.params.id);
  try {
    let todos = await getTodos();

    let todo = todos.find((t) => t.id === TaskId);

    if (todo) {
      todo.completed = true;
      await fs.writeFile("todos.json", JSON.stringify(todos));
      res.status(200).json({ msg: "todo item was found and updated" });
    } else {
      res.status(404).json({ Error: "Todo Item not Found" });
    }
  } catch (error) {
    console.log(error);
    res.status(404).json({ Error: "Todo Item not Found" });
  }
});

app.delete("/todos/:id", async (req, res) => {
  const TaskId = parseInt(req.params.id);
  try {
    let todos = await getTodos();

    let todo = todos.findIndex((t) => t.id === TaskId);

    if (todo !== -1) {
      todos.splice(todo, 1);
      await fs.writeFile("todos.json", JSON.stringify(todos));
      res.status(200).json({ msg: "todo item was found and Deleted" });
    } else {
      res.status(404).json({ Error: "Todo Item not Found" });
    }
  } catch (error) {
    console.log(error);
    res.status(404).json({ Error: "Todo Item not Found" });
  }
});

app.listen(3000);

module.exports = app;
